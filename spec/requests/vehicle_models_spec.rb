require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/vehicle_models", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # VehicleModel. As you add validations to VehicleModel, be sure to
  # adjust the attributes here as well.
  let(:vehicle_brand) { VehicleBrand.create(name: 'wv')}
  let(:valid_attributes) {
    {"name": "altima", "vehicle_brand_id": vehicle_brand.id}
  }
  let(:valid_attributes_request) {
    {"name": "bocho", "brand": vehicle_brand.name}
  }

  let(:invalid_attributes) {
    {}
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # VehicleModelsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {'Authorization': "Bearer #{@token}"}
  }

  before do
    User.create(email: "test@user.com", password: "123456")
    post login_url params: {email: "test@user.com", password: "123456"}
    @token = JSON.parse(response.body)["token"]
  end

  describe "GET /index" do
    it "renders a successful response" do
      VehicleModel.create! valid_attributes
      get vehicle_models_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      vehicle_model = VehicleModel.create! valid_attributes
      get vehicle_model_url(vehicle_model), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new VehicleModel" do
        expect {
          post vehicle_models_url,
               params: valid_attributes_request , headers: valid_headers, as: :json
        }.to change(VehicleModel, :count).by(1)
      end

      it "renders a JSON response with the new vehicle_model" do
        post vehicle_models_url,
             params:  valid_attributes_request , headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new VehicleModel" do
        expect {
          post vehicle_models_url,
               params: { vehicle_model: invalid_attributes }, as: :json
        }.to change(VehicleModel, :count).by(0)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {  name: 'jetta'}
      }

      it "updates the requested vehicle_model" do
        vehicle_model = VehicleModel.create! valid_attributes
        patch vehicle_model_url(vehicle_model),
              params: { vehicle_model: new_attributes }, headers: valid_headers, as: :json
        vehicle_model.reload
        expect(JSON.parse(response.body)["name"]).to eq "altima"
      end

      it "renders a JSON response with the vehicle_model" do
        vehicle_model = VehicleModel.create! valid_attributes
        patch vehicle_model_url(vehicle_model),
              params: { vehicle_model: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested vehicle_model" do
      vehicle_model = VehicleModel.create! valid_attributes
      expect {
        delete vehicle_model_url(vehicle_model), headers: valid_headers, as: :json
      }.to change(VehicleModel, :count).by(-1)
    end
  end
end
